from langgraph.prebuilt import create_react_agent
from langgraph.types import Command
from typing import Literal
from langgraph.graph import MessagesState, END
from langchain_core.messages import HumanMessage


class ExploiterAgent:
    system_prompt = '''
You are an expert security analyst specializing in PHP exploitation, specifically targeting vulnerabilities found in WordPress plugins. You will receive summarized reports of verified vulnerabilities from another analysis expert. Your task is to:

1. Clearly understand the described vulnerability.

2. Develop a realistic and practical exploit based on the provided summary.

3. Carefully reason through whether your proposed exploit would realistically work, considering typical security measures and plugin environments.

When crafting the exploit, outline detailed steps or code snippets clearly illustrating how the vulnerability could be exploited. If you identify any potential challenges or security mitigations that might prevent successful exploitation, clearly discuss these in your reasoning.

Conclude your evaluation explicitly with either:

FINAL EXPLOIT: 

EXPLOIT NOT FEASIBLE: 

Important: Only use the above conclusion phrases when you have thoroughly reasoned through the exploit's viability and are completely confident in your conclusion.
'''

    def __init__(self, model, tool_prompt, tools):
        llm = model
        self.tools = tools
        self.tool_prompt = tool_prompt
        self.auditor_agent = create_react_agent(model=llm, tools=self.tools, prompt=self.system_prompt)


    def node(self, state: MessagesState) -> Command[Literal[END]]:
        result = self.auditor_agent.invoke(state)
        return Command(update={"messages": result["messages"]}, goto=END)
